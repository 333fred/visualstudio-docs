### YamlMime:FAQ
metadata:
  title: "FAQ - Debugger feature finder"
  description: Frequently asked questions to help you identify the debugger feature that will help you debug your app
  ms.date: "06/07/2023"
  ms.topic: faq
  helpviewer_keywords:
    - "debugging [Visual Studio], find your feature"
  author: "mikejo5000"
  ms.author: "mikejo"
  manager: jmartens
  ms.workload:
    - "multiple"
title: FAQ - Debugger feature finder
summary: |
   This documentation addresses frequent questions about debugging features in Visual Studio. It also maps debugging tasks or issues to the relevant feature in the Visual Studio debugger. These links cover tasks or issues such as debugging multi-threaded application, code navigation, memory leak, inspecting variables, using breakpoints, external code debugging and many more. If you need an overview of debugger features, see [First look at the debugger](debugger-feature-tour.md) instead.
  
sections:
  - name: Ignored
    questions:      
      - question: |
          Breakpoints
        answer: |
          - **Pause running code to inspect a line of code that may contain a bug**
            
             Set a breakpoint. For more information, see [Using breakpoints](using-breakpoints.md).

          - **Does your variable have an unexpected value or you want inspect your app when it reaches a specific state?**

            Try a conditional breakpoint to control where and when a breakpoint gets activated by using conditional logic. Right-click on a breakpoint to add conditions. Set the condition to be true when the variable equals the unexpected value.  
            For more information, see [Breakpoint conditions](using-breakpoints.md#breakpoint-conditions).

          - **Need to log information to the Output window under configurable conditions without modifying or stopping your code?**
              
             Tracepoints allow you to log information to the Output window under configurable conditions without modifying or stopping your code.          
                    
          -  **Want to know when the value of your variable changes?**
          
             For C++, set a [data breakpoint](using-breakpoints.md#BKMK_set_a_data_breakpoint_native_cplusplus). 
             ::: moniker range=">= vs-2019"
             For apps using .NET Core 3, you can also set a [data breakpoint](using-breakpoints.md#BKMK_set_a_data_breakpoint_managed).
             ::: moniker-end
          
             Otherwise, for C# and F# only, you can [track an object ID with a conditional breakpoint](using-breakpoints.md#using-object-ids-in-breakpoint-conditions-c-and-f).
          
          - **Want to break execution only if another breakpoint is hit?**
          
            Set a Dependent Breakpoint that breaks execution only if another breakpoint is first hit. For more information, see [Dependent Breakpoint](using-breakpoints.md#Set-a-dependent-breakpoint).

          - **Want the breakpoint to hit only once?**
 
            Set a temporary breakpoint which lets you break the code only once. For more information, see [Temporary Beakpoint](using-breakpoints.md#Set-a-Temporary-breakpoint).
          
          - **Want to pause code inside a loop at a certain iteration?**
          
            Set a Dependent breakpoint that breaks execution only if another breakpoint is first hit. For more information, see [Hit count](using-breakpoints.md#set-a-hit-count-condition).
          
          - **Want to pause code at the start of a function when you know the function name but not its location?**
          
            You can do this with a function breakpoint. For more information, see [Set function breakpoints](using-breakpoints.md#BKMK_Set_a_breakpoint_in_a_source_file).
          
          - **Want to pause code at the start of multiple functions with the same name?**
          
            When you have multiple functions with the same name (overloaded functions or functions in different projects), you can use a [function breakpoint](using-breakpoints.md#BKMK_Set_a_breakpoint_in_a_source_file).
          
          - **Manage and keep track of your breakpoints**
          
            Use the **Breakpoints** window. For more information, see [Manage breakpoints](using-breakpoints.md#BKMK_Specify_advanced_properties_of_a_breakpoint_).
          
          - **Pause code and debug when a specific handled or unhandled exception is thrown**
          
            Although the Exception Helper shows you where an error occurred, if you want to pause and debug the specific error, you can [tell the debugger to break when an exception is thrown](managing-exceptions-with-the-debugger.md#tell-the-debugger-to-break-when-an-exception-is-thrown).
          
          - **Set a breakpoint from the call stack**
          
            If you want to pause and debug code while examining execution flow or viewing functions in the **Call Stack** windows, see [Set a breakpoint in the Call Stack window](using-breakpoints.md#BKMK_Set_a_breakpoint_from_debugger_windows).
          
          - **Pause code at a specific assembly instruction**
          
            You can do this by [setting a breakpoint from the Disassembly window](using-breakpoints.md#BKMK_Set_a_breakpoint_from_debugger_windows).
          
      - question: |
          Navigate code
        answer: |
          - **Learn the commands to step through your code while debugging**
          
            For more information, see [Navigate code with the debugger](navigating-through-code-with-the-debugger.md).

          - **Need to run the code to a particular line while skipping breakpoints without removing or disabling them?**
            
            You can use “Force Run To Cursor” for these scenarios. You can keep your breakpoints and the debugger will skip over them until it reaches the line of code with the cursor. 
            It will also skip any of the first-chance exceptions break conditions that may occur. 
            For more information, see [Navigate code with the debugger](navigating-through-code-with-the-debugger.md#force-run-to-a-cursor-location).

          - **Does your line of code have calls to different methods and you need to step into a specific method?**
            
            Right-click on the line of code to bring up a context menu that allows you to select ‘Step Into Specific’. This will show a list of all the methods that you could step into. 
            You can now select the method of interest.  

      - question: |
          Inspect and Visualize data
        answer: |
          - **Want to check the value of variables while running your app?**
          
            Hover over variables using [data tips](view-data-values-in-data-tips-in-the-code-editor.md) or [inspect variables in the Autos and Locals window](autos-and-locals-windows.md).
          
          - **Observe the changing value of a specific variable**
          
            Set a watch on the variable. For more information, see [Set a watch on variables](watch-and-quickwatch-windows.md).
          
          - **Need to view strings that are too long for the debugger window?**
          
            String Visualizer shows strings that are too long for a data tip or debugger window. It can also help you identify malformed strings.  
            Built-in [string visualizer](view-strings-visualizer.md)  in Visual Studio include Text, XML, HTML, and JSON options.
                                
          - **Need to view large collection objects?**
          
            The DataSet Visualizer allows you to view the contents of a DataSet, DataTable, DataView, or DataViewManager. 
            The IEnumerable Visualizer allows you to view objects such as Arrays, List, etc.
            For more information, see [Tabular visualizers](view-data-in-tabular-visualizer.md).


      - question: |
          Debug an app that is already running
        answer: |
          - **Need to debug running apps on local or remote computers, debug multiple processes simultaneously, debug apps that weren't created in Visual Studio, or debug any app you didn't start from Visual Studio?**  
           
             See [Attach to a running processes](attach-to-running-processes-with-the-visual-studio-debugger.md).

          - **Need to attach to the same application repeatedly?** 
            
             You can use **Reattach to Process** (**Shift+Alt+P**) to easily allow you to start debugging your application in one click without needing to go through the Attach to Process dialog every time.
             See [Reattach to a process](attach-to-running-processes-with-the-visual-studio-debugger.md#BKMK_reattach)

      - question: |
          Debug multithreaded applications
        answer: |
          - **Want to debug a multi-threaded application? or is your application in a hung state?**

            See [Parallel Stacks window](using-the-parallel-stacks-window.md) further troubleshooting

          - **Want to view the order in which functions are called?**

            See [How to view the call stack](how-to-use-the-call-stack-window.md).
       
      - question: |
          Analyze memory
        answer: |
           - **Does your application have a memory leak?**   

             Take a snapshot and open it with memory tool to troubleshoot further.
             See [Measure memory usage](../profiling/memory-usage.md).

           - **Need to analyze memory usage for native or managed applications?**
          
             Use the Visual Studio memory tool via live debugging, heap dumps, or the performance profiler.  
             See [Measure memory usage](how-to-use-the-call-stack-window.md).

           - **Want to analyze memory usage for native or managed applications without attaching a debugger?**
             Use the Visual Studio performance profiler with the memory usage tool enabled.  
             See [Analyze memory usage](../profiling/memory-usage-without-debugging2.md).

           - **Want to compare memory usage between two points in time?**
             
             Compare snapshots in the memory tool or compare two heap dumps using the diff functionality.
             See [Measure memory usage](how-to-use-the-call-stack-window.md).

      - question: |
          External Code Debugging
        answer: |
          - **Want to see only user code while debugging?**
  
            Just My Code is a Visual Studio debugging feature that automatically steps over calls to system, framework, and other non-user code. 
            In the Call Stack window, Just My Code collapses these calls into [External Code] frames. 
            See [Debug only user code with Just My Code](just-my-code.md)

          - **Need to view or debug the raw assembly instructions that your program is executing?** 
          
            Use the Disassembly Window from Debug > Windows > Disassembly. You can step over one instruction at a time and even set breakpoints on individual assembly instructions.  
      
          - **Need to see source code for .NET Libraries?**  
           
            Enable Microsoft Symbol Servers from Debug > Options > Symbols in order to download symbols and source for .NET Libraries.
            See [Specify symbol](specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger.md)
         
          - **Need to load PDBs from a specific or shared location or server?** 

            Configure your Symbol Servers from Debug > Options > Symbols. 
            See [Specify symbol](specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger.md)

          - **Want to never load a specific PDB? Or always load one?**

            Configure your Include and Exclude Lists in Debug > Options > Symbols.  
            See [Specify symbol](specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger.md)

      - question: |
          Configure debugging
        answer: |
          - **Need to configure debugger settings?**
          
            To configure debugger options and debugger project settings, see [Debugger settings and preparation](debugger-settings-and-preparation.md).
          
          - **Want to customize information shown in the debugger?**
          
            You may want to show information other than the object type as the value in different debugger windows. For C#, Visual Basic, F#, and C++/CLI code, use the [DebuggerDisplay](using-the-debuggerdisplay-attribute.md) attribute. For more advanced options, you can also customize the UI by creating a [custom visualizer](create-custom-visualizers-of-data.md).
            For native C++, use the [NatVis framework](create-custom-views-of-native-objects.md).
          
      - question: |
          Additional tasks
        answer: |
          - **Do you need to save a dump?**

             While stopped at an error or breakpoint during debugging, select **Debug > Save Dump As**.
             See [Dump files](using-dump-files.md)

          - **Looking to analyze a dump file?**

            Open the dump by choosein **File -> Open** in Visual Studio. To start debugging, select **Debug with Managed Only**, **Debug with Native Only**, **Debug with Mixed**, or **Debug with Managed Memory**.
            See [Dump files](using-dump-files.md)

          - **Need to edit code during a debugging session?**
          
            Use [Edit and continue](edit-and-continue.md). For XAML, use [XAML Hot Reload](../xaml-tools/xaml-hot-reload.md).

          - **Need to debug on remote machines?**
          
            See [Remote debugging](remote-debugging.md).
          
          - **Need to fix performance issues?**
          
            See [First look at the profiling tools](../profiling/profiling-feature-tour.md)

          - **Need to fix an exception?**

            See [Fix an exception](write-better-code-with-visual-studio.md#fix-an-exception).
          

